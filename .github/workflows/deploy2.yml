name: CI/CD

'on':
  push:
    branches:
      - main

env:
  GCP_REGION: ${{ secrets.REGION }}
  IMAGE: asia.gcr.io/${{ secrets.PROJECT_ID }}

jobs:
  delivery:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        users: actions/checkout@v3

      - name: setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          create_credentials_file: true
          workload_identity_provider: 'projects/193058990223/locations/global/workloadIdentityPools/gh-oidc-pool/providers/gh-oidc-pool'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}'

      - name: Configure docker to use the gcloud cli
        run: | 
        gcloud auth activate-service-account github-action-513041425@livenote-11939.iam.gserviceaccount.com --key-file=livenote-11939.json
        gcloud auth configure-docker

      - name: Build a docker image
        run: docker build -t ${{ env.IMAGE }} .

      - name: Push the docker image
        run: docker push ${{ env.IMAGE }}

      - name: Deploy to Cloud run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          sevice: renderer
          image: ${{ env.IMAGE }}
          region: ${{ env.REGION }}
      
      - name: Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_LIVENOTE_11939 }}'
          channelId: live
          projectId: ${{ secrets.PROJECT_ID }}

      - name: Build for Functions
        run: npm ci --prefix functions && npm run build --prefix functions

      - name: Deploy to Functions
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only functions --project=${{ secrets.PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN}}